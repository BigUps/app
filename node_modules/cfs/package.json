{
  "name": "cfs",
  "version": "0.2.0",
  "description": "Conditional file streams",
  "main": "index.js",
  "scripts": {
    "coverage": "istanbul cover ./node_modules/.bin/_mocha -- --reporter list test.js",
    "coveralls": "npm run coverage && coveralls < coverage/lcov.info",
    "test": "standard && mocha -t 30000"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jprichardson/node-cfs"
  },
  "keywords": [
    "fs",
    "file",
    "write",
    "writer",
    "stream",
    "streams",
    "deterministic",
    "conditional"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jprichardson/node-cfs/issues"
  },
  "homepage": "https://github.com/jprichardson/node-cfs",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "fs-extra": "^0.21.0",
    "istanbul": "^0.3.5",
    "mocha": "^2.1.0",
    "ospath": "^1.1.0",
    "standard": "4.x"
  },
  "dependencies": {
    "lru-cache": "^2.6.5"
  },
  "readme": "Node.js: conditional file streams\n=================================\n\n[![build status](https://secure.travis-ci.org/jprichardson/node-cfs.svg)](http://travis-ci.org/jprichardson/node-cfs)\n[![Coverage Status](https://img.shields.io/coveralls/jprichardson/node-cfs.svg)](https://coveralls.io/r/jprichardson/node-cfs)\n\nWritable file stream that can write to different files based upon the condition\nof what's being written. i.e. Intead of passing `filePath` as the first\nparameter to your stream, you pass a function that returns the path.\n\nThis saves you time because you no longer have to manage many different writable streams.\n\n\nUse Case\n--------\n\nThe biggest use case is to only have one writable fs stream that writes log files, except the log file\npath changes depending up the date.\n\n\n\nUsage\n-----\n\n    npm install -g cfs\n\n\n### Example 1\n\nWrite log data to different files depending upon the date.\n\n```js\nvar cfs = require('cfs')\nvar ymd = require('ymd')\n\nvar pathFn = function () {\n  // get date in YYYY-MM-dd\n  var date = ymd(new Date())\n  return date + '.txt'\n}\n\nvar logWriter = cfs.createWriteStream(pathFn, { flags: 'a' })\nlogWriter.write(someLogData)\n```\n\n### Example 2\n\nWrite data to different files depending upon what's being written.\nWrite even numbers to `evens.txt` and odd numbers to `odds.txt`.\n\nNo need to worry about opening a bunch of files. File descriptors\nare cached.\n\n```js\nvar cfs = require('cfs')\n\nvar pathFn = function (data) {\n  if (data == null) return null\n\n  if (parseInt(data.toString('utf8'), 10) % 2 === 0) {\n    return 'evens.txt'\n  } else {\n    return 'odds.txt'\n  }\n}\n\nvar logWriter = cfs.createWriteStream(pathFn, { flags: 'a' })\nlogWriter.write(someLogData)\n```\n\n### API\n\n#### createWriteStream()\n\n- `pathFunction`: A function that should return the path. Method signature `(data, encoding)`.\n- `options`: These are the standard options that you'd pass to [`fs.createWriteStream`](https://nodejs.org/api/fs.html#fs_fs_createwritestream_path_options).\n\nLicense\n-------\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "gitHead": "4f82d6507918b612dd4ddacdad80f75851f026ef",
  "_id": "cfs@0.2.0",
  "_shasum": "e185fae76e72b2d90e4068d2952914258d6aa3cd",
  "_from": "cfs@latest"
}
