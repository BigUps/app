{
  "name": "cb-insight",
  "version": "0.1.0",
  "description": "common blockchain wrapper for Bitpay Insight APIs",
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha --reporter spec --timeout 15000 --grep \"Addresses Summary|Unspents|Propagate|addresses unspents\"  "
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jprichardson/cb-insight"
  },
  "keywords": [
    "bitcoin",
    "blockchain",
    "insight"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jprichardson/cb-insight/issues"
  },
  "homepage": "https://github.com/jprichardson/cb-insight",
  "devDependencies": {
    "cb-tester": "^0.1.11",
    "mocha": "^2.1.0",
    "nock": "^0.53.0"
  },
  "dependencies": {
    "async": "^0.9.0",
    "decimal.js": "^4.0.1",
    "superagent": "^0.21.0"
  },
  "readme": "cb-insight\n==========\n\nCommon Blockchain wrapper for any [Bitpay Insight API](https://github.com/bitpay/insight-api).\n\n\nCommon Blockchain\n------------------\n\nCommon Blockchain is a concept invented by Daniel Cousens to normalize the differences between Blockchain APIs so that you can easily switch APIs if you need to.\n\n\n### Canonical Example\n\n- [cb-helloblock](https://github.com/dcousens/cb-helloblock)\n\n\n### Testing Module\n\n- [cb-tester](https://github.com/dcousens/common-blockchain)\n\n\nAlternatives\n------------\n- [Helloblock](https://github.com/dcousens/cb-helloblock)\n- [Blockr](https://github.com/weilu/cb-blockr)\n\n\nAPI\n---\n\n### Addresses\n\n#### summary(addresses, callback)\n\n- **addresses**: an array of addresses or just a single address string\n- **callback**: function to call upon completion. Function signature\n`function(err, results)`. If an array of addresses is passed,  `results` will be an array.\nIf a single address is passed, then `results` will be a single result object.\n\n**example:**\n\n```js\nvar Blockchain = require('cb-insight')\nvar blockchain = new Blockchain('https://test-insight.bitpay.com')\n\nvar addr = 'mpNDUWcDcZw1Teo3LFHvr8usNdwDLKdTaY'\nblockchain.addresses.summary(addr, function(err, result) {\n  console.dir(result)\n})\n```\n\n**returns:**\n\n```js\n{ address: 'mpNDUWcDcZw1Teo3LFHvr8usNdwDLKdTaY',\n  balance: 20000,\n  totalReceived: 20000,\n  txCount: 1 }\n```\n\n\n#### unspents(addresses, callback)\n\n- **addresses**: an array of addresses or just a single address string\n- **callback**: function to call upon completion. Function signature\n`function(err, utxos)`. `utxos` is an array of unspent outputs.\n\n**example:**\n\n```js\nvar Blockchain = require('cb-insight')\nvar blockchain = new Blockchain('https://test-insight.bitpay.com')\n\nvar addrs = [\n  'mpNDUWcDcZw1Teo3LFHvr8usNdwDLKdTaY',\n  'mv3fK2ME7g9K4HswGXs6mG92e7gRgsTsqM',\n  'mvJCbQvE6DgVAECMwDprASP3NMwuU53Eie',\n  'mvwvsPT2J3VPEaYmFdExFc4iBGRRK2Vdkd'\n]\nblockchain.addresses.unspents(addrs, function(err, utxos) {\n  console.dir(utxos)\n})\n```\n\n**returns:**\n\n```js\n [ { txId: 'ffd316b0c4feb9d29c61c3734fcde0167600441e560931c8c7267a9de3d9e29a',\n    confirmations: 41097,\n    address: 'mpNDUWcDcZw1Teo3LFHvr8usNdwDLKdTaY',\n    value: 20000,\n    vout: 0 },\n  { txId: '30d64580b02f3cbfb487c4bf58d6bcdd90caa655352620357caa14412ea7954d',\n    confirmations: undefined,\n    address: 'mv3fK2ME7g9K4HswGXs6mG92e7gRgsTsqM',\n    value: 420000000,\n    vout: 0 },\n  { txId: 'f611cd3a1d676631b630600695074aab57b98ddc6982e93419438753f8f3fbda',\n    confirmations: 41097,\n    address: 'mv3fK2ME7g9K4HswGXs6mG92e7gRgsTsqM',\n    value: 20000,\n    vout: 0 },\n  { txId: '41017e25bed3b740508fc10286ffd363935698bd541ac8c43d8fad52cde25220',\n    confirmations: 41097,\n    address: 'mvJCbQvE6DgVAECMwDprASP3NMwuU53Eie',\n    value: 20000,\n    vout: 0 },\n  { txId: '3df7613ea58afc4c6c443cad6a8a1eaff4c5ae04e8124ec4e7204811c120101c',\n    confirmations: 41098,\n    address: 'mvwvsPT2J3VPEaYmFdExFc4iBGRRK2Vdkd',\n    value: 20000,\n    vout: 0 } ]\n```\n\n\n\n\n### Transactions\n\n#### propagate(rawTxs, callback)\n\n- **rawTxs**: an array of raw transaction hex strings, or just a single hex string\n- **callback**: function to call upon completion with signature `function(err, results)`. \nIf `rawTxs` is an array of hex strings, then `results` will be an array, otherwise, result is a single object.\n\n**example:**\n\n```js\nvar Blockchain = require('cb-insight')\nvar blockchain = new Blockchain('https://test-insight.bitpay.com')\n\nvar rawTxs = ['01000000018a3feea3ee433d5d6ff342c1a73bf67eded7a645725c7cdc4ce3f56b0f55de7d000000008b4830450221009d342a19422d2d16cfeac63b48f91d45df55d3b0e7cf60fe4c60ef337e4c742a0220230b9d2c248d4c85ab53c3efa18ab0a39ed72ab1d1926bdffbaaf9b60f5d165a0141047e646d9a2731ec1eb862e80e9fd262def4137e04dc4b9b1a04e4b1494f4748095a872ee5dd2653df252c84f553fc8d53d143920ae2508edf5798703bcb7ff1d3ffffffff01a0860100000000001976a9146ef4a59431f760a19a3dbf27fb442126f4b876f588ac00000000',\n  '01000000017ab3341e35059c4c9c5dc7b77b19d8054d69f496a2899b54225ca77bac7f07dd000000008b483045022100ac8f8a90fd735ddcf87ed4f89531977dd350797c84d4709b3dfef2083dad52a102200166b7407e7033763b6c22b8be56d8f7c549515d2b84db641b7f0172554765be0141047e646d9a2731ec1eb862e80e9fd262def4137e04dc4b9b1a04e4b1494f4748095a872ee5dd2653df252c84f553fc8d53d143920ae2508edf5798703bcb7ff1d3ffffffff0110270000000000001976a9146ef4a59431f760a19a3dbf27fb442126f4b876f588ac00000000',\n  '01000000016a74d477e69af1ad1e336a44a0ddd675d8fab89520c321a77c58884e7a6a0595000000008b4830450221009ee7da1c2921c999413503bd4dc289c0d7bef2f55b63033048aba99ff3c98c3b02202256d291fc1deb62d91c4b959586d69f33ec3df982775c869d4e34d15a5034370141047e646d9a2731ec1eb862e80e9fd262def4137e04dc4b9b1a04e4b1494f4748095a872ee5dd2653df252c84f553fc8d53d143920ae2508edf5798703bcb7ff1d3ffffffff0150c30000000000001976a9146ef4a59431f760a19a3dbf27fb442126f4b876f588ac00000000']\n\nblockchain.transactions.propagate(rawTxs, function(err, results) {\n  console.dir(results)\n})\n```\n\n**returns:**\n\n```js\n[ { txId: 'cbcd40a9c3bff0e85ef3d369fb6d797ac5a21ba5ce6ab0e76a3f3ca2d622824d' },\n  { txId: '6214938d01883b1904e42ea9ecd3349a06f0cb16298825ad33727031f8a57a8b' },\n  { txId: 'acfdcf2de5ad16d046b90fc6bc60b888005398014f7e2d60905887cd23bcf9d9' } ]\n```\n\n\n",
  "readmeFilename": "README.md",
  "gitHead": "17b1329819a1825d7191ec9d3b82fd423743d538",
  "_id": "cb-insight@0.1.0",
  "_shasum": "99d325932be841fd8ccffab1d0daf2ddacc22f68",
  "_from": "cb-insight@latest"
}
