{
  "name": "babel-resolve",
  "version": "0.1.0",
  "description": "Create a resolve function for babel/register.",
  "main": "index.js",
  "scripts": {
    "test": "standard && node test.js | tap-spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jprichardson/babel-resolve.git"
  },
  "keywords": [
    "babel",
    "local",
    "modules",
    "register",
    "resolve"
  ],
  "author": {
    "name": "JP Richardson"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jprichardson/babel-resolve/issues"
  },
  "homepage": "https://github.com/jprichardson/babel-resolve#readme",
  "dependencies": {
    "clone": "^1.0.2"
  },
  "devDependencies": {
    "tap-spec": "^4.0.2",
    "tape": "^4.0.1"
  },
  "readme": "babel-resolve\n=============\n\nCreate a babel resolve function. This allows you to easily require your project's\nlocal modules without passing in relative paths.\n\n\nInstall\n-------\n\n    npm i --save-dev babel-resolve\n\n\nUsage\n-----\n\n```js\nvar babelResolve = require('babel-resolve')\nvar resolver = babelResolve('local/', './src/_local_modules')\nrequire('babel/resolve')({resolve: resolver.resolve})\n```\n\nNow, in your program, you can import like:\n\n```js\nimport mymodule from 'local/mymodule'\n```\n\nAPI\n---\n\n### create(prefix, dir)\n\n`class` method that creates a resolver object that has methods `resolve()` and `mapKeys()`.\n\n### resolve()\n\n`instance` method that returns a function for `Babel` to resolve your modules.\n\n### mapKeys(stubObject)\n\n`instance` method that takes as input `stubObject` and returns a clone of it\nwith the keys replaced with `resolve(key)`. Useful for stubbing.\n\n\nLicense\n-------\nMIT\n\nCopyright (c) [JP Richardson][https://github.com/jprichardson]\n",
  "readmeFilename": "README.md",
  "gitHead": "f393fdf4c32f5dbeb56afff7f85fa473fd135561",
  "_id": "babel-resolve@0.1.0",
  "_shasum": "689112f8d7adeca2ec8ba2397c49bc1f4cea56ae",
  "_from": "babel-resolve@*"
}
